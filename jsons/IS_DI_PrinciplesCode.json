{
  "questions": [
    {"correctAnswer": "Dependency Inversion Principle", "question": "Which principle does this code demonstrate?", "code": "class OrderService {\n    private PaymentProcessor processor;\n    public OrderService(PaymentProcessor p) {\n        this.processor = p;\n    }\n}", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Dependency Inversion Principle", "Liskov Substitution Principle"]},
    {"correctAnswer": "Interface Segregation Principle", "question": "Which principle is violated in this example?", "code": "interface Worker {\n    void work();\n    void eat();\n}\nclass Robot implements Worker {\n    void work() { /*...*/ }\n    void eat() { /* Not needed */ }\n}", "answers": ["Single Responsibility Principle", "Interface Segregation Principle", "Open/Closed Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Dependency Inversion Principle", "question": "Which principle is correctly applied here?", "code": "interface DataAccess {\n    void save(Object data);\n}\nclass CustomerService {\n    private DataAccess dao;\n    public CustomerService(DataAccess d) {\n        this.dao = d;\n    }\n}", "answers": ["Interface Segregation Principle", "Dependency Inversion Principle", "Liskov Substitution Principle", "Single Responsibility Principle"]},
    {"correctAnswer": "Interface Segregation Principle", "question": "Which principle is followed in this refactored code?", "code": "interface Workable {\n    void work();\n}\ninterface Eatable {\n    void eat();\n}\nclass Robot implements Workable {\n    void work() { /*...*/ }\n}", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Interface Segregation Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Dependency Inversion Principle", "question": "Which principle is violated in this example?", "code": "class ReportGenerator {\n    private MySQLDatabase db;\n    public ReportGenerator() {\n        this.db = new MySQLDatabase();\n    }\n}", "answers": ["Liskov Substitution Principle", "Dependency Inversion Principle", "Interface Segregation Principle", "Single Responsibility Principle"]},
    {"correctAnswer": "Interface Segregation Principle", "question": "Which principle suggests this interface design is better?", "code": "interface Printer {\n    void print();\n}\ninterface Scanner {\n    void scan();\n}\nclass AllInOneMachine implements Printer, Scanner {\n    void print() { /*...*/ }\n    void scan() { /*...*/ }\n}", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Interface Segregation Principle", "Dependency Inversion Principle"]}
  ]
}