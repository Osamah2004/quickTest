{
  "questions": [
    {"correctAnswer": "Single Responsibility Principle", "question": "Which SOLID principle states that a module should have only one reason to change?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Open/Closed Principle", "question": "Which principle advocates that software should be open for extension but closed for modification?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Liskov Substitution Principle", "question": "Which principle ensures that objects of a superclass can be replaced with objects of a subclass without affecting program correctness?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Interface Segregation Principle", "question": "Which principle suggests that clients should not be forced to depend on interfaces they do not use?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Dependency Inversion Principle", "question": "Which principle states that high-level modules should not depend on low-level modules, but both should depend on abstractions?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Single Responsibility Principle", "question": "Which principle is violated when a class handles both report generation and email sending?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Open/Closed Principle", "question": "Which principle is violated when modifying an existing class to add new functionality instead of extending it?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Liskov Substitution Principle", "question": "Which principle is violated when a subclass throws an exception for a method that the superclass defines without exceptions?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "High Cohesion", "question": "What term describes a module where all elements are strongly related and focused on a single task?", "answers": ["Low Cohesion", "High Cohesion", "Tight Coupling", "Loose Coupling"]},
    {"correctAnswer": "Loose Coupling", "question": "What term describes components in a system that are minimally dependent on each other?", "answers": ["Tight Coupling", "Loose Coupling", "High Cohesion", "Low Cohesion"]},
    {"correctAnswer": "Single Responsibility Principle", "question": "Which principle is demonstrated by splitting a Calculator class into AdditionCalculator, SubtractionCalculator, etc.?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Open/Closed Principle", "question": "Which principle is demonstrated by using a ColoredShape decorator to add color functionality without modifying Shape classes?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Liskov Substitution Principle", "question": "Which principle is violated when a RandomSorter subclass returns unsorted results while the Sorter superclass expects sorted results?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Interface Segregation Principle", "question": "Which principle is violated when a class implements a large interface but only uses a few of its methods?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Dependency Inversion Principle", "question": "Which principle is demonstrated by injecting NotificationService into Notifier instead of directly using EmailService?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Single Responsibility Principle", "question": "Which principle is violated when a Report class handles both report generation and file saving?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "Open/Closed Principle", "question": "Which principle is violated when adding a new shape type requires modifying an existing draw() method with if-else conditions?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Dependency Inversion Principle"]},
    {"correctAnswer": "Liskov Substitution Principle", "question": "Which principle is violated when an ElectricVehicle subclass throws an exception for startEngine() while Vehicle superclass defines it normally?", "answers": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution Principle", "Interface Segregation Principle"]},
    {"correctAnswer": "High Cohesion", "question": "Which design quality is achieved when a module's responsibilities are closely related and focused?", "answers": ["Low Cohesion", "High Cohesion", "Tight Coupling", "Loose Coupling"]},
    {"correctAnswer": "Loose Coupling", "question": "Which design quality reduces the impact of changes in one component on other components?", "answers": ["Tight Coupling", "Loose Coupling", "High Cohesion", "Low Cohesion"]}
  ]
}