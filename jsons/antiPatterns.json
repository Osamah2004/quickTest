{
  "questions": [
    {"correctAnswer":"How good or bad something is","question":"Merriam-Webster's primary quality definition?","answers":["Development speed","How good or bad something is","Feature count","Production cost"]},
    {"correctAnswer":"Quality of design and quality of conformance","question":"Software quality measures what two aspects?","answers":["Code length/complexity","Quality of design and quality of conformance","Developer productivity","User satisfaction"]},
    {"correctAnswer":"Process quality, Product quality, Quality in use","question":"ISO/IEC 9126 quality divisions?","answers":["Frontend/backend quality","Process quality, Product quality, Quality in use","Code/test quality","Development/maintenance quality"]},
    {"correctAnswer":"Functional Suitability, Performance efficiency, Compatibility, Usability, Reliability, Security, Maintainability, Portability","question":"ISO 25010 system quality characteristics?","answers":["Speed/cost/scalability","Functional Suitability, Performance efficiency, Compatibility, Usability, Reliability, Security, Maintainability, Portability","Bugs/features/tests","Code style/comments"]},
    {"correctAnswer":"Anti-patterns","question":"What are poor design solutions to recurring problems called?","answers":["Design patterns","Anti-patterns","Best practices","Code standards"]},
    {"correctAnswer":"Code Smells","question":"Term for poor local coding decisions?","answers":["Anti-patterns","Code Smells","Lexical smells","Architecture smells"]},
    {"correctAnswer":"Lexical smells","question":"Category for poor naming/documentation?","answers":["Anti-patterns","Code Smells","Lexical smells","Design flaws"]},
    {"correctAnswer":"The Blob","question":"Which anti-pattern features a large low-cohesion controller class?","answers":["Golden Hammer","The Blob","Spaghetti Code","Lava Flow"]},
    {"correctAnswer":"Spaghetti Code","question":"Anti-pattern with unpredictable change impacts?","answers":["The Blob","Dead End","Spaghetti Code","Input Kludge"]},
    {"correctAnswer":"Large class, Long method, Data Clumps, Primitive Obsession, Long Parameter List","question":"Which are Bloater code smells?","answers":["Large class, Long method, Data Clumps, Primitive Obsession, Long Parameter List","Comments, Dead code","Switch statements","Feature envy"]},
    {"correctAnswer":"Switch Statements, Alternative Classes, Refused Bequest","question":"Object orientation abuser smells?","answers":["Data Clumps","Switch Statements, Alternative Classes, Refused Bequest","Long Method","Duplicate Code"]},
    {"correctAnswer":"Comments, Duplicate Code, Dead Code, Speculative Generality, Lazy Class","question":"Dispensable code smells?","answers":["Large Class","Comments, Duplicate Code, Dead Code, Speculative Generality, Lazy Class","Data Clumps","Feature Envy"]},
    {"correctAnswer":"Feature Envy, Inappropriate Intimacy, Middle Man, Message Chains","question":"Coupler code smells?","answers":["Primitive Obsession","Feature Envy, Inappropriate Intimacy, Middle Man, Message Chains","Long Parameter List","Switch Statements"]},
    {"correctAnswer":"Divergent change, Shotgun surgery, Parallel Inheritance","question":"Change preventer smells?","answers":["Data Clumps","Divergent change, Shotgun surgery, Parallel Inheritance","Long Method","Duplicate Code"]},
    {"correctAnswer":"Lost OO advantage, Hard to reuse/test, Expensive to load","question":"Consequences of The Blob?","answers":["Improved performance","Lost OO advantage, Hard to reuse/test, Expensive to load","Better encapsulation","Easier maintenance"]},
    {"correctAnswer":"Unpredictable object use, Difficult to reuse, Lost OO benefits","question":"Spaghetti Code consequences?","answers":["Better performance","Unpredictable object use, Difficult to reuse, Lost OO benefits","Improved readability","Easier testing"]},
    {"correctAnswer":"Break Single Responsibility Principle","question":"What principle do Bloaters violate?","answers":["Open/Closed Principle","Break Single Responsibility Principle","Liskov Substitution","Interface Segregation"]},
    {"correctAnswer":"Incomplete/incorrect OOP use","question":"What characterizes Object Orientation Abusers?","answers":["Excessive documentation","Incomplete/incorrect OOP use","Too many comments","Overuse of inheritance"]},
    {"correctAnswer":"Pointless/unneeded code","question":"Dispensables definition?","answers":["Complex algorithms","Pointless/unneeded code","Performance optimizations","Essential utilities"]},
    {"correctAnswer":"Excessive coupling/delegation","question":"Couplers characteristic?","answers":["Low cohesion","Excessive coupling/delegation","Too many interfaces","Inheritance abuse"]},
    {"correctAnswer":"Changes require many modifications","question":"Change Preventers issue?","answers":["Hard to document","Changes require many modifications","Complex logic","Performance overhead"]},
    {"correctAnswer":"Low cohesion","question":"Primary symptom of The Blob?","answers":["High cohesion","Low cohesion","Proper encapsulation","Good abstraction"]},
    {"correctAnswer":"Procedural style in OO code","question":"Spaghetti Code symptom?","answers":["Excessive OO","Procedural style in OO code","Too many interfaces","Over-abstraction"]},
    {"correctAnswer":"Many parameters often used together","question":"Data Clumps identification?","answers":["Global variables","Many parameters often used together","Too many classes","Complex inheritance"]},
    {"correctAnswer":"Overuse of primitives instead of objects","question":"Primitive Obsession meaning?","answers":["Using only objects","Overuse of primitives instead of objects","Avoiding primitives","Too many wrappers"]},
    {"correctAnswer":"Method with too many parameters","question":"Long Parameter List definition?","answers":["Short methods","Method with too many parameters","Global access","Static methods"]},
    {"correctAnswer":"Using switch instead of polymorphism","question":"Switch Statements smell?","answers":["Using enums","Using switch instead of polymorphism","Proper polymorphism","Interface overuse"]},
    {"correctAnswer":"Subclass doesn't use inherited features","question":"Refused Bequest meaning?","answers":["Proper inheritance","Subclass doesn't use inherited features","Interface implementation","Method overriding"]},
    {"correctAnswer":"Unnecessary explanatory comments","question":"Comments smell refers to what?","answers":["No comments","Unnecessary explanatory comments","Good documentation","Code removal"]},
    {"correctAnswer":"Identical/similar code in multiple places","question":"Duplicate Code definition?","answers":["Unique code","Identical/similar code in multiple places","Generated code","Template code"]},
    {"correctAnswer":"Unused code that's never executed","question":"Dead Code meaning?","answers":["Critical code","Unused code that's never executed","Legacy code","Deprecated code"]},
    {"correctAnswer":"Future-proofing that's never used","question":"Speculative Generality issue?","answers":["Needed features","Future-proofing that's never used","Proper planning","Essential abstraction"]},
    {"correctAnswer":"Class doing almost nothing","question":"Lazy Class definition?","answers":["Overworked class","Class doing almost nothing","Utility class","Singleton"]},
    {"correctAnswer":"Method uses another class's features more","question":"Feature Envy characteristic?","answers":["Method uses another class's features more","Static methods","Private access","Inheritance"]},
    {"correctAnswer":"Chained method calls (a.b.c.d())","question":"Message Chains identification?","answers":["Short methods","Chained method calls (a.b.c.d())","Static calls","Simple returns"]},
    {"correctAnswer":"Class changed for different reasons","question":"Divergent Change symptom?","answers":["Stable class","Class changed for different reasons","Private methods","Final class"]},
    {"correctAnswer":"Change requires many class modifications","question":"Shotgun Surgery issue?","answers":["Localized change","Change requires many class modifications","Single responsibility","Cohesive classes"]},
    {"correctAnswer":"Parallel class hierarchies","question":"Parallel Inheritance meaning?","answers":["Single hierarchy","Parallel class hierarchies","Interface segregation","Dependency inversion"]},
    {"correctAnswer":"Poor naming/documentation choices","question":"Linguistic Anti-Patterns definition?","answers":["Good naming","Poor naming/documentation choices","Proper comments","Clear interfaces"]},
    {"correctAnswer":"Method does more than name suggests","question":"LA Type A characteristics?","answers":["Method does exactly what name says","Method does more than name suggests","Proper implementation","Clear purpose"]},
    {"correctAnswer":"Method does less than name suggests","question":"LA Type B characteristics?","answers":["Complete implementation","Method does less than name suggests","Proper functionality","Clear naming"]},
    {"correctAnswer":"Method contradicts its name","question":"LA Type C characteristics?","answers":["Consistent behavior","Method contradicts its name","Proper documentation","Good design"]},
    {"correctAnswer":"Increase maintenance costs","question":"Primary impact of code smells?","answers":["Improve performance","Increase maintenance costs","Reduce bugs","Speed development"]},
    {"correctAnswer":"Make systems harder to maintain","question":"Anti-patterns primary effect?","answers":["Improve quality","Make systems harder to maintain","Reduce costs","Speed delivery"]},
    {"correctAnswer":"Hinder code understanding","question":"Bad smells impact on comprehension?","answers":["Improve readability","Hinder code understanding","Clarify purpose","Document behavior"]},
    {"correctAnswer":"Increase change- and fault-proneness","question":"Khomh et al. finding about smells?","answers":["Reduce bugs","Increase change- and fault-proneness","Improve stability","Speed development"]},
    {"correctAnswer":"Program comprehension, Refactoring, Refining","question":"Steps to address smells?","answers":["Rewrite, Test, Deploy","Program comprehension, Refactoring, Refining","Document, Review, Approve","Plan, Code, Debug"]},
    {"correctAnswer":"Ensure tests pass before refactoring","question":"First refactoring step?","answers":["Delete old code","Ensure tests pass before refactoring","Write documentation","Profile performance"]},
    {"correctAnswer":"Find code that smells","question":"Second refactoring step?","answers":["Rewrite everything","Find code that smells","Add new features","Change architecture"]},
    {"correctAnswer":"Determine simplifications","question":"Third refactoring step?","answers":["Increase complexity","Determine simplifications","Postpone changes","Write more code"]},
    {"correctAnswer":"Make simplifications","question":"Final refactoring step?","answers":["Revert changes","Make simplifications","Document only","Delay indefinitely"]},
    {"correctAnswer":"Large controller class with low cohesion","question":"The Blob symptoms?","answers":["Small focused classes","Large controller class with low cohesion","Proper encapsulation","Good abstraction"]},
    {"correctAnswer":"Tangled code relationships","question":"Spaghetti Code symptoms?","answers":["Clear dependencies","Tangled code relationships","Proper modularity","Good structure"]},
    {"correctAnswer":"Many parameters used together","question":"Data Clumps symptoms?","answers":["Few parameters","Many parameters used together","Good encapsulation","Proper abstraction"]},
    {"correctAnswer":"Primitives instead of objects","question":"Primitive Obsession symptoms?","answers":["Objects for everything","Primitives instead of objects","Proper typing","Good modeling"]},
    {"correctAnswer":"Excessive method parameters","question":"Long Parameter List symptoms?","answers":["Few parameters","Excessive method parameters","Good encapsulation","Proper abstraction"]},
    {"correctAnswer":"Switch instead of polymorphism","question":"Switch Statements symptoms?","answers":["Proper polymorphism","Switch instead of polymorphism","Good inheritance","Clear conditions"]},
    {"correctAnswer":"Unused inherited features","question":"Refused Bequest symptoms?","answers":["Proper inheritance","Unused inherited features","Good abstraction","Clear hierarchy"]},
    {"correctAnswer":"Unnecessary explanations","question":"Comments symptoms?","answers":["No comments needed","Unnecessary explanations","Good documentation","Clear code"]},
    {"correctAnswer":"Code duplication","question":"Duplicate Code symptoms?","answers":["Unique implementations","Code duplication","Proper reuse","Good factoring"]},
    {"correctAnswer":"Unused code segments","question":"Dead Code symptoms?","answers":["All code used","Unused code segments","Proper cleanup","Good maintenance"]},
    {"correctAnswer":"Unused future-proofing","question":"Speculative Generality symptoms?","answers":["Needed features","Unused future-proofing","Proper planning","Good foresight"]},
    {"correctAnswer":"Trivial classes","question":"Lazy Class symptoms?","answers":["Essential classes","Trivial classes","Proper decomposition","Good design"]},
    {"correctAnswer":"Excessive foreign class access","question":"Feature Envy symptoms?","answers":["Self-contained","Excessive foreign class access","Proper encapsulation","Good cohesion"]},
    {"correctAnswer":"Deep method call chains","question":"Message Chains symptoms?","answers":["Shallow calls","Deep method call chains","Proper delegation","Good encapsulation"]},
    {"correctAnswer":"Multiple change reasons","question":"Divergent Change symptoms?","answers":["Single purpose","Multiple change reasons","Good cohesion","Proper focus"]},
    {"correctAnswer":"Widespread modifications needed","question":"Shotgun Surgery symptoms?","answers":["Localized changes","Widespread modifications needed","Proper modularity","Good separation"]},
    {"correctAnswer":"Mirrored hierarchies","question":"Parallel Inheritance symptoms?","answers":["Single hierarchy","Mirrored hierarchies","Proper abstraction","Good design"]},
    {"correctAnswer":"Misleading names","question":"Linguistic Anti-Patterns symptoms?","answers":["Clear names","Misleading names","Proper terminology","Good vocabulary"]},
    {"correctAnswer":"Method does extra work","question":"LA Type A symptoms?","answers":["Single purpose","Method does extra work","Proper focus","Good design"]},
    {"correctAnswer":"Method lacks functionality","question":"LA Type B symptoms?","answers":["Complete implementation","Method lacks functionality","Proper features","Good behavior"]},
    {"correctAnswer":"Method contradicts name","question":"LA Type C symptoms?","answers":["Consistent behavior","Method contradicts name","Proper naming","Good logic"]},
    {"correctAnswer":"Increased maintenance effort","question":"Smells impact on maintenance?","answers":["Reduced effort","Increased maintenance effort","No effect","Improved quality"]},
    {"correctAnswer":"Higher likelihood of faults","question":"Smells impact on reliability?","answers":["Fewer bugs","Higher likelihood of faults","No impact","Better stability"]},
    {"correctAnswer":"More difficult modifications","question":"Smells impact on evolution?","answers":["Easier changes","More difficult modifications","No difference","Faster development"]},
    {"correctAnswer":"Reduced comprehension","question":"Smells impact on understanding?","answers":["Improved clarity","Reduced comprehension","No effect","Better documentation"]},
    {"correctAnswer":"Early detection reduces costs","question":"Why detect smells early?","answers":["No benefit","Early detection reduces costs","Increases work","Slows development"]},
    {"correctAnswer":"Refactoring","question":"Primary solution for smells?","answers":["Rewriting","Refactoring","Documentation","Testing"]},
    {"correctAnswer":"Behavior-preserving transformations","question":"Refactoring definition?","answers":["New features","Behavior-preserving transformations","Bug fixes","Performance optimizations"]}
  ]
}