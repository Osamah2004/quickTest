{
  "questions": [
    {
      "correctAnswer": "The Blob",
      "question": "Which anti-pattern is shown in this class?",
      "code": "class MainController {\n  void processOrder() {...}\n  void generateReport() {...}\n  void validateData() {...}\n  void updateUI() {...}\n  // 50+ more methods\n}",
      "answers": ["The Blob", "Spaghetti Code", "Lava Flow", "Golden Hammer"]
    },
    {
      "correctAnswer": "Primitive Obsession",
      "question": "Which code smell is shown here?",
      "code": "void scheduleMeeting(int y, int m, int d, int hr, int min)",
      "answers": ["Primitive Obsession", "Long Method", "Data Clumps", "Feature Envy"]
    },
    {
      "correctAnswer": "Data Clumps",
      "question": "Which code smell is present in these parameters?",
      "code": "void registerUser(string firstName, string lastName, string street, string city, string zip)",
      "answers": ["Data Clumps", "Primitive Obsession", "Duplicate Code", "Shotgun Surgery"]
    },
    {
      "correctAnswer": "Switch Statements",
      "question": "Which code smell is shown in this method?",
      "code": "string getSound(Animal a) {\n  switch(a.getType()) {\n    case DOG: return \"Bark\";\n    case CAT: return \"Meow\";\n  }\n}",
      "answers": ["Switch Statements", "Feature Envy", "Message Chains", "Middle Man"]
    },
    {
      "correctAnswer": "Feature Envy",
      "question": "Which smell exists in this Order class method?",
      "code": "class Order {\n  decimal calculatePrice(Customer c) {\n    return c.getBasePrice() * c.getDiscount();\n  }\n}",
      "answers": ["Data Clumps", "Feature Envy", "Divergent Change", "Inappropriate Intimacy"]
    },
    {
      "correctAnswer": "Duplicate Code",
      "question": "Which code smell exists between these methods?",
      "code": "void printInvoice() { /* 20 lines */ }\nvoid printReceipt() { /* Same 20 lines with minor changes */ }",
      "answers": ["Long Method", "Duplicate Code", "Speculative Generality", "Lazy Class"]
    },
    {
      "correctAnswer": "Long Method",
      "question": "Which code smell is shown here?",
      "code": "void processOrder() {\n  // 150+ lines of code\n  // mixing validation, calculation,\n  // database access, and logging\n}",
      "answers": ["Long Method", "Duplicate Code", "Primitive Obsession", "Data Clumps"]
    },
    {
      "correctAnswer": "Speculative Generality",
      "question": "Which anti-pattern is shown in this unused abstraction?",
      "code": "interface FutureFeature {\n  void mightNeedThis();\n  void possiblyRequired();\n} // Never implemented",
      "answers": ["Speculative Generality", "Lazy Class", "Data Class", "Middle Man"]
    },
    {
      "correctAnswer": "Refused Bequest",
      "question": "Which inheritance problem exists here?",
      "code": "class Bird {\n  void fly() {...}\n}\nclass Penguin extends Bird {\n  void fly() { throw new UnsupportedOperation(); }\n}",
      "answers": ["Switch Statements", "Refused Bequest", "Feature Envy", "Data Clumps"]
    },
    {
      "correctAnswer": "Lazy Class",
      "question": "Which code smell is shown in this trivial class?",
      "code": "class ReportFormatter {\n  string format(Report r) {\n    return r.toString();\n  }\n}",
      "answers": ["Lazy Class", "Middle Man", "Data Class", "Duplicate Code"]
    },
    {
      "correctAnswer": "Middle Man",
      "question": "Which code smell exists in this delegation?",
      "code": "class Order {\n  Customer getCustomer() {\n    return customerManager.getCustomer();\n  }\n}",
      "answers": ["Feature Envy", "Middle Man", "Message Chains", "Inappropriate Intimacy"]
    },
    {
      "correctAnswer": "Comments",
      "question": "Which code smell is indicated by this comment?",
      "code": "// Check if employee is eligible for bonus\nif (employee.years > 2 && employee.rating > 3)",
      "answers": ["Comments", "Duplicate Code", "Long Method", "Primitive Obsession"]
    },
    {
      "correctAnswer": "Shotgun Surgery",
      "question": "Which change problem is shown here?",
      "code": "// Tax calculation spread across:\n// Order.java, Invoice.java, ReportGenerator.java",
      "answers": ["Divergent Change", "Shotgun Surgery", "Parallel Inheritance", "Data Clumps"]
    },
    {
      "correctAnswer": "Divergent Change",
      "question": "Which maintenance issue exists here?",
      "code": "class ReportGenerator {\n  // Changed for both formatting AND data source reasons\n}",
      "answers": ["Divergent Change", "Shotgun Surgery", "Feature Envy", "Data Clumps"]
    },
    {
      "correctAnswer": "A.1 - 'Get' more than accessor",
      "question": "Which linguistic anti-pattern exists?",
      "code": "List<Item> getCartItems() {\n  loadInventory();\n  applyDiscounts();\n  return items;\n}",
      "answers": ["A.1 - 'Get' more than accessor", "B.3 - 'Get' doesn't return", "C.1 - Name/type oppose", "D.1 - Says one but many"]
    },
    {
      "correctAnswer": "A.2 - 'Is' returns more than Boolean",
      "question": "Which naming issue exists here?",
      "code": "int isValid() { // Returns validation codes 0-4\n  return checkRules() ? 1 : 0;\n}",
      "answers": ["A.2 - 'Is' returns more than Boolean", "B.4 - Not answered question", "C.2 - Signature/comment oppose", "E.1 - Says many but one"]
    },
    {
      "correctAnswer": "A.3 - 'Set' method returns",
      "question": "Which convention violation exists?",
      "code": "Customer setName(string n) {\n  this.name = n;\n  return this;\n}",
      "answers": ["A.3 - 'Set' method returns", "B.5 - Transform doesn't return", "D.2 - Name suggests Boolean", "F.1 - Name/type oppose"]
    },
    {
      "correctAnswer": "B.3 - 'Get' method does not return",
      "question": "Which implementation issue exists?",
      "code": "void getConfiguration() {\n  loadConfig();\n  validateConfig();\n}",
      "answers": ["A.1 - 'Get' does more", "B.3 - 'Get' method does not return", "C.1 - Name/type oppose", "E.1 - Says many but one"]
    },
    {
      "correctAnswer": "B.4 - Not answered question",
      "question": "Which boolean method issue exists?",
      "code": "void isValid() {\n  return checks > 0;\n}",
      "answers": ["A.2 - 'Is' returns more", "B.4 - Not answered question", "D.2 - Name suggests Boolean", "F.2 - Signature/comment oppose"]
    },
    {
      "correctAnswer": "C.1 - Name and return type oppose",
      "question": "Which contradiction exists here?",
      "code": "EnabledState disable() {\n  return new EnabledState(false);\n}",
      "answers": ["B.5 - Transform doesn't return", "C.1 - Name and return type oppose", "E.1 - Says many but one", "F.1 - Name/type oppose"]
    },
    {
      "correctAnswer": "D.1 - Says one but contains many",
      "question": "Which naming issue exists?",
      "code": "List<Employee> employee = new ArrayList<>();",
      "answers": ["D.1 - Says one but contains many", "E.1 - Says many but one", "F.1 - Name/type oppose", "F.2 - Signature/comment oppose"]
    },
    {
      "correctAnswer": "D.2 - Name suggests Boolean but type does not",
      "question": "Which type mismatch exists?",
      "code": "int isActive = 0; // 0=false, 1=true",
      "answers": ["D.2 - Name suggests Boolean but type does not", "E.1 - Says many but one", "F.1 - Name/type oppose", "F.2 - Signature/comment oppose"]
    },
    {
      "correctAnswer": "E.1 - Says many but contains one",
      "question": "Which naming issue exists?",
      "code": "boolean statistics = false; // Toggle for stats",
      "answers": ["D.1 - Says one but many", "E.1 - Says many but contains one", "F.1 - Name/type oppose", "F.2 - Signature/comment oppose"]
    },
    {
      "correctAnswer": "F.1 - Attribute name and type oppose",
      "question": "Which contradiction exists?",
      "code": "Endpoint startPoint; // Actually stores connection",
      "answers": ["D.1 - Says one but many", "E.1 - Says many but one", "F.1 - Attribute name and type oppose", "F.2 - Signature/comment oppose"]
    },
    {
      "correctAnswer": "F.2 - Signature and comment oppose",
      "question": "Which documentation issue exists?",
      "code": "/* Excluded patterns */\nconst string INCLUDED_PATTERNS = ...",
      "answers": ["D.2 - Name suggests Boolean", "E.1 - Says many but one", "F.1 - Name/type oppose", "F.2 - Signature and comment oppose"]
    },
    {
      "correctAnswer": "Spaghetti Code",
      "question": "Which anti-pattern is shown?",
      "code": "void process() {\n  if (a) { x(); goto y; }\n  else if (b) { z(); goto x; }\n  // Many tangled gotos\n}",
      "answers": ["The Blob", "Spaghetti Code", "Input Kludge", "Ambiguous Viewpoint"]
    },
    {
      "correctAnswer": "Lava Flow",
      "question": "Which anti-pattern is leftover code?",
      "code": "// Old credit calc, don't know if safe to remove\nvoid LegacyCreditCalc() {...}",
      "answers": ["Dead End", "Lava Flow", "Poltergeists", "Boat Anchor"]
    },
    {
      "correctAnswer": "Golden Hammer",
      "question": "Which anti-pattern overuses XML?",
      "code": "// Using XML for everything\nclass Config, class Logger, class DataStore...",
      "answers": ["Golden Hammer", "The Blob", "Cut-and-Paste", "Mushroom Management"]
    },
    {
      "correctAnswer": "Dead End",
      "question": "Which anti-pattern is unsupported?",
      "code": "// Vendor SDK discontinued in 2020\nvoid UseOldSDK() {...}",
      "answers": ["Dead End", "Lava Flow", "Boat Anchor", "Input Kludge"]
    },
    {
      "correctAnswer": "Input Kludge",
      "question": "Which anti-pattern ignores errors?",
      "code": "void ProcessInput() {\n  try {...} catch { /* ignore */ }\n}",
      "answers": ["Input Kludge", "Ambiguous Viewpoint", "Walking through Minefield", "Functional Decomposition"]
    },
    {
      "correctAnswer": "Ambiguous Viewpoint",
      "question": "Which anti-pattern mixes concerns?",
      "code": "class Report {\n  // Mixes UI, business logic, and DB code\n}",
      "answers": ["Ambiguous Viewpoint", "The Blob", "Cut-and-Paste", "Poltergeists"]
    },
    {
      "correctAnswer": "Functional Decomposition",
      "question": "Which anti-pattern is procedural in OO?",
      "code": "class Order {\n  void Step1() {...}\n  void Step2() {...}\n  // No real objects\n}",
      "answers": ["Functional Decomposition", "The Blob", "Spaghetti Code", "Golden Hammer"]
    },
    {
      "correctAnswer": "Cut-and-Paste Programming",
      "question": "Which anti-pattern duplicates code?",
      "code": "// Same validation copied in 10 places\nbool Validate() {...}",
      "answers": ["Cut-and-Paste Programming", "Spaghetti Code", "Lava Flow", "Boat Anchor"]
    },
    {
      "correctAnswer": "Poltergeists",
      "question": "Which anti-pattern has trivial classes?",
      "code": "class ManagerFactoryCreator {...} // Just instantiates",
      "answers": ["Poltergeists", "The Blob", "Lazy Class", "Middle Man"]
    },
    {
      "correctAnswer": "Boat Anchor",
      "question": "Which anti-pattern retains unneeded code?",
      "code": "// JPEG support from 1990s\nclass JpegHandler {...} // Never used",
      "answers": ["Boat Anchor", "Lava Flow", "Dead End", "Golden Hammer"]
    },
    {
      "correctAnswer": "Mushroom Management",
      "question": "Which anti-pattern keeps devs uninformed?",
      "code": "// No specs, just fix bugs as they come in",
      "answers": ["Mushroom Management", "Golden Hammer", "Input Kludge", "Ambiguous Viewpoint"]
    }
  ]
}