{
  "questions": [
    {"correctAnswer": "General repeatable solution to common problems", "question": "What is a design pattern in software engineering?", "answers": ["Specific algorithm implementation", "General repeatable solution to common problems", "Programming language syntax", "Debugging technique"]},
    {"correctAnswer": "Gang of Four (GoF)", "question": "Which book popularized the concept of design patterns in software?", "answers": ["Clean Code", "Gang of Four (GoF)", "The Pragmatic Programmer", "Design Patterns Explained"]},
    {"correctAnswer": "Problem, Solution, Consequences", "question": "What are the three essential elements of a design pattern description?", "answers": ["Class, Method, Interface", "Problem, Solution, Consequences", "Input, Process, Output", "Syntax, Semantics, Pragmatics"]},
    {"correctAnswer": "Replace conditional logic with polymorphism", "question": "What is the primary solution offered by the Strategy pattern?", "answers": ["Create singleton instances", "Replace conditional logic with polymorphism", "Implement multiple inheritance", "Encapsulate object creation"]},
    {"correctAnswer": "Program to an interface, not an implementation", "question": "Which fundamental principle does the Strategy pattern demonstrate?", "answers": ["Single Responsibility Principle", "Program to an interface, not an implementation", "Don't Repeat Yourself", "Keep It Simple Stupid"]},
    {"correctAnswer": "Improve maintainability", "question": "What is the primary goal of using design patterns in software development?", "answers": ["Improve runtime performance", "Reduce code size", "Improve maintainability", "Increase compilation speed"]},
    {"correctAnswer": "Template for solving problems in different situations", "question": "How should design patterns be viewed according to their definition?", "answers": ["Complete code solutions", "Language-specific features", "Template for solving problems in different situations", "Debugging checklists"]},
    {"correctAnswer": "Name, Intent, Motivation", "question": "Which of these is part of the standard GoF pattern template?", "answers": ["Name, Intent, Motivation", "Variables, Functions, Classes", "Inputs, Outputs, Side-effects", "Syntax, Examples, Exceptions"]},
    {"correctAnswer": "When you need to vary algorithms independently from clients", "question": "When is the Strategy pattern most applicable?", "answers": ["When creating database connections", "When implementing inheritance hierarchies", "When you need to vary algorithms independently from clients", "When optimizing for memory usage"]},
    {"correctAnswer": "It provides a common vocabulary for designers", "question": "Why is giving patterns names important?", "answers": ["It makes code compile faster", "It provides a common vocabulary for designers", "It reduces memory usage", "It automatically generates documentation"]},
    {"correctAnswer": "They can introduce structural complexity", "question": "What is a potential drawback of using design patterns?", "answers": ["They slow down program execution", "They can introduce structural complexity", "They require specific programming languages", "They prevent code reuse"]},
    {"correctAnswer": "Description of behavior with interaction diagrams", "question": "What does the 'Collaborations' section in a pattern template describe?", "answers": ["Compiler optimization techniques", "Description of behavior with interaction diagrams", "Version control strategies", "Memory allocation patterns"]},
    {"correctAnswer": "Patterns are often combined to solve bigger problems", "question": "Why are 'Related Patterns' included in pattern descriptions?", "answers": ["To list competing alternatives", "Patterns are often combined to solve bigger problems", "To show historical evolution", "To demonstrate language portability"]}
  ]
}