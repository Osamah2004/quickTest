{
    "questions": [
        {"correctAnswer": "True", "question": "Software maintenance involves activities performed to modify an existing software product.", "answers": ["True", "False"]},
        {"correctAnswer": "Corrective", "question": "Which type of maintenance fixes errors detected in a software system?", "answers": ["Corrective", "Adaptive", "Preventive", "Perfective"]},
        {"correctAnswer": "False", "question": "Preventive maintenance focuses only on fixing existing defects.", "answers": ["True", "False"]},
        {"correctAnswer": "Adaptive", "question": "Which maintenance type modifies software to accommodate changes in its environment?", "answers": ["Corrective", "Adaptive", "Preventive", "Perfective"]},
        {"correctAnswer": "Rejuvenation", "question": "What term describes restarting software to clean its internal state as a preventive measure?", "answers": ["Optimization", "Rejuvenation", "Refactoring", "Refinement"]},
        {"correctAnswer": "True", "question": "Perfective maintenance includes changes to improve processing efficiency.", "answers": ["True", "False"]},
        {"correctAnswer": "Artifacts", "question": "Documents, diagrams, and code related to a software project are examples of what?", "answers": ["Artifacts", "Baselines", "Modules", "Configurations"]},
        {"correctAnswer": "True", "question": "Software evolution describes the continuous process of modifying software to meet new requirements.", "answers": ["True", "False"]},
        {"correctAnswer": "Lehman", "question": "Who proposed the laws of software evolution?", "answers": ["Lowell Jay Arthur", "Lehman", "Mark Halpern", "Pirzada"]},
        {"correctAnswer": "Continuing change", "question": "Which law of software evolution states that a system must adapt to new needs to remain useful?", "answers": ["Continuing change", "Increasing complexity", "Continuing growth", "Conservation of familiarity"]},
        {"correctAnswer": "False", "question": "According to Lehman, software systems naturally reduce in complexity over time.", "answers": ["True", "False"]},
        {"correctAnswer": "Self-regulation", "question": "What law states that the process of software evolution is self-regulating?", "answers": ["Conservation of familiarity", "Continuing growth", "Self-regulation", "Feedback system"]},
        {"correctAnswer": "False", "question": "Lehman’s laws are universally applicable to all software systems, including FOSS.", "answers": ["True", "False"]},
        {"correctAnswer": "Phase-out", "question": "What stage of software evolution involves retiring or replacing a system?", "answers": ["Evolution", "Servicing", "Phase-out", "Development"]},
        {"correctAnswer": "True", "question": "Corrective maintenance is triggered by defects identified in software.", "answers": ["True", "False"]},
        {"correctAnswer": "Preventive", "question": "Which maintenance type proactively addresses potential future issues?", "answers": ["Adaptive", "Preventive", "Perfective", "Corrective"]},
        {"correctAnswer": "ISO/IEC 14764", "question": "Which standard introduced preventive maintenance as a formal maintenance category?", "answers": ["ISO/IEC 14764", "IEEE/EIA 1219", "CMMI", "ISO/IEC 12207"]},
        {"correctAnswer": "True", "question": "Empirical studies validate many of Lehman’s laws of software evolution.", "answers": ["True", "False"]},
        {"correctAnswer": "Consultive", "question": "Providing expert advice on software without modifying it falls under which maintenance type?", "answers": ["Consultive", "Evaluative", "Preventive", "Corrective"]},
        {"correctAnswer": "True", "question": "Reengineering transforms an existing system into a new, improved system.", "answers": ["True", "False"]},
        {"correctAnswer": "Reverse engineering", "question": "What process abstracts a system into higher-level representations for understanding?", "answers": ["Reverse engineering", "Forward engineering", "Rejuvenation", "Refactoring"]},
        {"correctAnswer": "Reformative", "question": "Which maintenance type reorganizes or restructures system components?", "answers": ["Groomative", "Reformative", "Adaptive", "Corrective"]},
        {"correctAnswer": "Ripple effect", "question": "What term describes how a change in one part of a system impacts others?", "answers": ["Ripple effect", "Impact analysis", "Cross-referencing", "Propagation effect"]},
        {"correctAnswer": "True", "question": "Traceability analysis links high-level artifacts like requirements and design.", "answers": ["True", "False"]},
        {"correctAnswer": "Dependency analysis", "question": "Which impact analysis technique evaluates relationships between program entities?", "answers": ["Ripple effect", "Dependency analysis", "Cross-referencing", "Impact propagation"]},
        {"correctAnswer": "True", "question": "Refactoring improves internal code structure without changing system behavior.", "answers": ["True", "False"]},
        {"correctAnswer": "Chunking", "question": "What strategy in program comprehension groups lower-level structures into higher abstractions?", "answers": ["Chunking", "Cross-referencing", "Ripple effect", "Traceability"]},
        {"correctAnswer": "Legacy systems", "question": "Old, valuable systems resistant to modification are called what?", "answers": ["Frozen systems", "Legacy systems", "Static systems", "Archived systems"]},
        {"correctAnswer": "Wrap", "question": "Which legacy system management technique hides complexity with a software layer?", "answers": ["Wrap", "Discard and redevelop", "Migrate", "Outsource"]},
        {"correctAnswer": "High cohesion", "question": "Which property of reusable components ensures they focus on a single operation?", "answers": ["High cohesion", "Loose coupling", "Adaptability", "Portability"]},
        {"correctAnswer": "True", "question": "Software reuse reduces maintenance effort and increases productivity.", "answers": ["True", "False"]},
        {"correctAnswer": "False", "question": "Perfective maintenance only addresses defect corrections.", "answers": ["True", "False"]},
        {"correctAnswer": "Baseline", "question": "What term represents a stable reference point for software configuration items?", "answers": ["Baseline", "Snapshot", "Version", "Module"]},
        {"correctAnswer": "Migration", "question": "Which activity moves a legacy system to a new platform?", "answers": ["Migration", "Refactoring", "Rejuvenation", "Integration"]},
        {"correctAnswer": "Feedback system", "question": "Which Lehman law highlights the multi-level feedback nature of software evolution?", "answers": ["Continuing change", "Feedback system", "Self-regulation", "Continuing growth"]},
        {"correctAnswer": "True", "question": "Kitchenham categorized maintenance activities hierarchically based on intent.", "answers": ["True", "False"]},
        {"correctAnswer": "True", "question": "ISO/IEC 14764 describes software maintenance as iterative.", "answers": ["True", "False"]},
        {"correctAnswer": "SLAs", "question": "What agreements define performance targets for maintenance services?", "answers": ["SLAs", "Contracts", "Metrics agreements", "Performance bonds"]},
        {"correctAnswer": "True", "question": "Program comprehension helps developers understand system functionality at different levels.", "answers": ["True", "False"]},
        {"correctAnswer": "Impact analysis", "question": "What process estimates the effects of proposed software changes?", "answers": ["Impact analysis", "Dependency analysis", "Ripple effect", "Traceability"]},
        {"correctAnswer": "True", "question": "Reusable components must exhibit adaptability and understandability.", "answers": ["True", "False"]},
        {"correctAnswer": "True", "question": "Conservation of familiarity ensures maintainers can understand system changes effectively.", "answers": ["True", "False"]},
        {"correctAnswer": "Architectural reuse", "question": "Which type of software reuse involves standardizing design conventions?", "answers": ["Architectural reuse", "Program reuse", "Data reuse", "Design reuse"]},
        {"correctAnswer": "False", "question": "Ripple effect analysis prevents change propagation in a system.", "answers": ["True", "False"]},
        {"correctAnswer": "Environmental independence", "question": "What property of reusable components ensures they work across different environments?", "answers": ["Environmental independence", "Loose coupling", "Portability", "Reliability"]},
        {"correctAnswer": "True", "question": "Software reusability increases reliability and reduces risk.", "answers": ["True", "False"]}
    ]
}
