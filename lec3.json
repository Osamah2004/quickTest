{
    "questions": [
        {"correctAnswer": "True", "question": "Software evolution refers to continuous change that improves a system over time.", "answers": ["True", "False"]},
        {"correctAnswer": "Maintenance", "question": "Which term describes planned activities to preserve a system from failure or decline?", "answers": ["Maintenance", "Evolution", "Refactoring", "Reengineering"]},
        {"correctAnswer": "False", "question": "Lehman's laws apply to all types of software systems, including FOSS.", "answers": ["True", "False"]},
        {"correctAnswer": "Continuing change", "question": "Which of Lehman's laws states that a system must adapt to new needs to remain useful?", "answers": ["Increasing complexity", "Continuing growth", "Continuing change", "Feedback system"]},
        {"correctAnswer": "Increasing complexity", "question": "What does Lehmanâ€™s second law state about the complexity of a software system?", "answers": ["It decreases over time.", "It remains constant.", "It increases unless actively reduced.", "It has no impact on maintenance."]},
        {"correctAnswer": "True", "question": "FOSS systems have shown super-linear growth trends, unlike proprietary systems.", "answers": ["True", "False"]},
        {"correctAnswer": "Corrective", "question": "What type of maintenance addresses defects found in released software?", "answers": ["Corrective", "Adaptive", "Perfective", "Preventive"]},
        {"correctAnswer": "Adaptive", "question": "Which type of maintenance modifies software to accommodate environmental changes?", "answers": ["Preventive", "Adaptive", "Perfective", "Corrective"]},
        {"correctAnswer": "Preventive", "question": "Which type of maintenance anticipates future problems and acts to prevent them?", "answers": ["Adaptive", "Corrective", "Preventive", "Perfective"]},
        {"correctAnswer": "True", "question": "Perfective maintenance focuses on enhancing system performance and maintainability.", "answers": ["True", "False"]},
        {"correctAnswer": "ISO/IEC 14764", "question": "Which standard added preventive maintenance to software maintenance categories?", "answers": ["IEEE/EIA 1219", "ISO/IEC 14764", "CMMI", "ISO/IEC 12207"]},
        {"correctAnswer": "False", "question": "Refactoring changes the observable behavior of a system.", "answers": ["True", "False"]},
        {"correctAnswer": "Consultive", "question": "Which type of maintenance provides expert advice without modifying the system?", "answers": ["Reformative", "Consultive", "Preventive", "Evaluative"]},
        {"correctAnswer": "Groomative", "question": "What type of maintenance involves reorganizing code to improve clarity and reduce redundancy?", "answers": ["Groomative", "Evaluative", "Reformative", "Adaptive"]},
        {"correctAnswer": "True", "question": "Ripple effect analysis measures how changes in one part of the system affect others.", "answers": ["True", "False"]},
        {"correctAnswer": "Reverse engineering", "question": "What term refers to creating an abstract representation of a system for better understanding?", "answers": ["Forward engineering", "Reverse engineering", "Impact analysis", "Legacy system analysis"]},
        {"correctAnswer": "Legacy systems", "question": "What term describes old but valuable systems that resist modification?", "answers": ["Reengineered systems", "Legacy systems", "Static systems", "Frozen systems"]},
        {"correctAnswer": "Wrap", "question": "Which legacy system management technique adds a software layer to hide complexity?", "answers": ["Discard and redevelop", "Wrap", "Migrate", "Freeze"]},
        {"correctAnswer": "True", "question": "Impact analysis helps estimate the effects of proposed changes on a system.", "answers": ["True", "False"]},
        {"correctAnswer": "Dependency analysis", "question": "Which impact analysis technique examines semantic dependencies in code?", "answers": ["Ripple effect", "Traceability analysis", "Dependency analysis", "Graph-based analysis"]},
        {"correctAnswer": "True", "question": "Refactoring aims to improve internal code structure without altering system behavior.", "answers": ["True", "False"]},
        {"correctAnswer": "Chunking", "question": "Which program comprehension strategy creates higher-level abstractions from lower-level structures?", "answers": ["Chunking", "Cross-referencing", "Top-down", "Bottom-up"]},
        {"correctAnswer": "High cohesion", "question": "Which property of reusable components indicates that they focus on a single operation?", "answers": ["High cohesion", "Loose coupling", "Portability", "Adaptability"]},
        {"correctAnswer": "True", "question": "Reusable software components can significantly reduce maintenance effort and cost.", "answers": ["True", "False"]}
    ]
}
