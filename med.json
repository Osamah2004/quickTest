{
  "questions": [
    {"correctAnswer": "Framework","question": "What is Spring boot?","answers": ["Framework", "Tool", "Web Application", "Library"]},
    {"correctAnswer": "Simplify web application development","question": "What is the primary role of Spring Boot?","answers": ["Manage dependencies", "Simplify web application development", "Optimize database operations", "Manage application memory"]},
    {"correctAnswer": "@SpringBootApplication","question": "Which annotation is used to define entry point in Spring boot application?","answers": ["@Controller", "@RestController", "@SpringBootApplication", "@Entity"]},
    {"correctAnswer": "@GetMapping","question": "Which annotation is used to create REST API to handle GET request?","answers": ["@PostMapping", "@GetMapping", "@RequestMapping", "@PathVariable"]},
    {"correctAnswer": "Automatically inject required dependencies","question": "What does the @Autowired annotation do in Spring boot application?","answers": ["Automatically inject required dependencies", "Configure application properties", "Establish connectivity to database", "Initialize the main Spring Boot Application"]},
    {"correctAnswer": "spring-boot-starter-web","question": "Which dependency is required for spring web application in POM.xml?","answers": ["spring-boot-starter-web", "spring-boot-starter-data-jpa", "spring-boot-starter-thymeleaf", "spring-boot-starter-security"]},
    {"correctAnswer": "@Valid","question": "Which annotation is used for validating data intercepted by REST controller?","answers": ["@RequestBody", "@Validate", "@Valid", "@ControllerAdvice"]},
    {"correctAnswer": "Extract parameter from URL to method argument","question": "What is the purpose of @PathVariable annotation?","answers": ["Inject request headers", "Extract parameter from URL to method argument", "Validate request body content", "Define return type"]},
    {"correctAnswer": "@Repository","question": "Which annotation is most suitable for a JPA interface?","answers": ["@Component", "@Entity", "@Controller", "@Repository"]},
    {"correctAnswer": "@Table","question": "Which annotation is used to map a table name in the database that is different than entity name?","answers": ["@Entity", "@Table", "@Repository", "@Email"]},
    {"correctAnswer": "None of the above","question": "What is the purpose of ResponseEntity static class?","answers": ["Encapsulate Code/Header/Body of the Client Request", "Handle exceptions of Response", "Create new entity table to store server response", "None of the above"]},
    {"correctAnswer": "@Pattern","question": "To use regExp for phone number validation, which annotation you can use?","answers": ["@Pattern", "@Email", "@Size", "@Positive"]},
    {"correctAnswer": "@ControllerAdvice","question": "Which annotation is used to define a global exception handler class for your spring boot application?","answers": ["@ExceptionHandler", "@ControllerAdvice", "@ResponseEntity", "@Exception"]},
    {"correctAnswer": "to perform CRUD operations","question": "What is the purpose of the Repository layer?","answers": ["to perform CRUD operations", "to manage routing", "to identify and entity", "to pass data to view"]},
    {"correctAnswer": "False","question": "In JPQL, you can write SQL-like code using real table and column names.","answers": ["True", "False"]},
    {"correctAnswer": "@OneToMany private List<Course> crsList;","question": "You can define one-to-many relationship between two entities (e.g. Student , Course) so one student can register in many courses using:","answers": ["@OneToMany private Course crs;", "@OneToMany private List<Course> crsList;", "@ManyToOne private Course crs;", "@ManyToOne private List<Course> crsList;"]},
    {"correctAnswer": "False","question": "The owner of a Many-to-Many relationship is responsible for mapping(mirroring) the relationship.","answers": ["True", "False"]},
    {"correctAnswer": "None of the above","question": "To prevent cyclic references in a uni-directional relationship between two entities we use the following annotation:","answers": ["@JsonManagedReference", "@JsonIgnore", "@JsonIdentityInfo", "None of the above"]},
    {"correctAnswer": "findByEmployeeName(String name);","question": "In standard JPA, you can extend the JPA repository behaviour to find an Employee by his \"employeeName\" field using the following signature:","answers": ["findByemployeeName(String name);", "getByemployeeName(String name);", "findByEmployeeName(String name);", "getByEmployeename(String name);"]},
    {"correctAnswer": "Returns \"Hello, World!\" when a GET request is made to /api/message","question": "What does the following code do? @RestController @RequestMapping(\"/api\") public class ApiController { @GetMapping(\"/message\") public String getMessage() { return \"Hello, World!\"; } }","answers": ["Returns \"Hello, World!\" when a GET request is made to /api/message", "Returns a JSON object with \"Hello, World!\" as a property", "Returns a JSON object with a null message", "Throws an error because the method lacks a @ResponseBody annotation"]},
    {"correctAnswer": "Throws an exception","question": "What does the following code do? @PostMapping(\"/data\") public String postData( String data) { return \"Received: \" + data; }","answers": ["Processes POST requests to /data and returns a JSON response", "Processes POST requests to /data and returns a plain text response", "Only handles GET requests to /data", "Throws an exception"]},
    {"correctAnswer": "Returns \"Hello!\" with a 200 status and a custom header.","question": "What does the controller method do? @GetMapping(\"/hello\") public ResponseEntity<String> sayHello() { return ResponseEntity.status(HttpStatus.OK) .header(\"Custom-Header\", \"HelloWorld\") .body(\"Hello!\"); }","answers": ["Returns \"Hello!\" with a 200 status and a custom header.", "Returns \"Hello!\" as plain text without headers.", "Returns a JSON object with a 200 status.", "Throws an error because headers are not supported in ResponseEntity."]},
    {"correctAnswer": "Maps a query parameter to the keyword argument.","question": "What is the purpose of @RequestParam in the following code: @GetMapping(\"/search\") public String search(@RequestParam String keyword) { return \"Searching for: \" + keyword; }","answers": ["Maps a path variable to the keyword argument.", "Validates the keyword parameter.", "Maps a query parameter to the keyword argument.", "Read Json message body"]},
    {"correctAnswer": "Prevent cyclic references during Json serialization","question": "What does the @JsonManagedReference annotation do in the following @Entity public class User { @Id private Long id; @OneToMany(mappedBy = \"user\") @JsonManagedReference private List<Order> orders; }","answers": ["Manage Json generation", "Prevent cyclic references during Json serialization", "Prevent creating new Json entry to relationship", "Validate database mapping to Json"]},
    {"correctAnswer": "Finds users whose ages fall between the specified minimum and maximum.","question": "What is the output of the following query method: @Query(\"SELECT u FROM User u WHERE u.age BETWEEN :minAge AND :maxAge\") List<User> findUsersByAgeRange( int minAge, int maxAge);","answers": ["Finds users whose ages fall between the specified minimum and maximum.", "Finds users younger than the minimum age.", "Finds users older than the maximum age.", "Throws an error"]},
    {"correctAnswer": "Retrieves a student by ID and sends a 404 Not Found response if the student does not exist.","question": "What does this code do: @GetMapping(\"/students/{id}\") public ResponseEntity<Student> getStudentById(@PathVariable Long id) { Optional<Student> student = studentRepository.findById(id); if (student.isPresent()) { return ResponseEntity.status(HttpStatus.OK).body(student.get()); } else { return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); } }","answers": ["Retrieves a student by ID and sends a 404 Not Found response if the student does not exist.", "Retrieves a student by ID and always returns a 200 OK response.", "Throws an exception if the student is not found.", "Returns a null response for all requests."]},
    {"correctAnswer": "C","question": "Given the following JSON input: { \"studentId\": 1, \"courseId\": 101 } which implementation is valid for Many-to-Many relationship between Student and Course entities?","answers": ["A", "B", "C", "D"]}
  ]
}
